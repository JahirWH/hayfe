<div class="video-container">
    <h3 class="titulo">Can humanity be trusted humanity?</h3>

  <div class="video-wrapper">
    <video id="videoPlayer" onclick="togglePlayPause()"  autoplay muted></video>
    <button id="soundToggle" aria-label="Toggle sound">
      <span id="soundOnIcon" class="hidden"><img class="sound" src="/sound.png" /></span>
      <span id="soundOffIcon"><img class="sound" src="/mute.png" /></span>
      <div class="volume-control">
        <input type="range" id="volumeSlider" min="0" max="100" value="100" />
      </div>
    </button>
  </div>
</div>

<script>
  let isPaused = false;
  let videos: { url: string }[] = [];
  let currentVideoIndex = 0;
  const videoElement = document.getElementById('videoPlayer') as HTMLVideoElement;
  const soundToggle = document.getElementById('soundToggle') as HTMLButtonElement;
  const soundOnIcon = document.getElementById('soundOnIcon') as HTMLElement;
  const soundOffIcon = document.getElementById('soundOffIcon') as HTMLElement;

  // Cargar videos desde el JSON
  async function loadVideos() {
    try {
      const response = await fetch('/videos.json');
      videos = await response.json();
      
      if (videos.length > 0) {
        playVideo(currentVideoIndex);
      }
    } catch (error) {
      console.error('Error cargando videos:', error);
    }
  }

  // Reproducir video por índice
  function playVideo(index: number) {
    if (videos.length === 0) return;
    
    const video = videos[index];
    videoElement.src = video.url;
    videoElement.play();
  }

  // Función para alternar reproducción/pausa
  function togglePlayPause() {
    if (!videoElement) return;
    const videoWrapper = document.querySelector('.video-wrapper');
    if (!videoWrapper) return;
    
    if (videoElement.paused) {
      videoElement.play();
      videoWrapper.classList.remove('paused');
      isPaused = false;
    } else {
      videoElement.pause();
      videoWrapper.classList.add('paused');
      isPaused = true;
    }
  }

  // Pasar al siguiente video cuando termine
  function playNextVideo() {
    currentVideoIndex = (currentVideoIndex + 1) % videos.length;
    playVideo(currentVideoIndex);
  }

  // Toggle de sonido
  function toggleSound() {
    if (!videoElement || !soundOnIcon || !soundOffIcon) return;
    videoElement.muted = !videoElement.muted;
    soundOnIcon.classList.toggle('hidden');
    soundOffIcon.classList.toggle('hidden');
    
    // Si desmutea, establecer el volumen al valor del slider
    const volumeSlider = document.getElementById('volumeSlider') as HTMLInputElement;
    if (!videoElement.muted && volumeSlider) {
      videoElement.volume = parseInt(volumeSlider.value, 10) / 100;
    }
  }

  // Controlar el volumen
  document.addEventListener('DOMContentLoaded', () => {
    const volumeSlider = document.getElementById('volumeSlider') as HTMLInputElement;
    if (!volumeSlider || !videoElement || !soundOnIcon || !soundOffIcon) return;
    
    const handleVolumeChange = (e: Event) => {
      const target = e.target as HTMLInputElement;
      const volume = parseInt(target.value, 10) / 100;
      if (videoElement) {
        videoElement.volume = volume;
        
        // Si el volumen es 0, mutear, si no, desmutear
        if (volume === 0) {
          videoElement.muted = true;
          soundOnIcon.classList.add('hidden');
          soundOffIcon.classList.remove('hidden');
        } else if (videoElement.muted) {
          videoElement.muted = false;
          soundOnIcon.classList.remove('hidden');
          soundOffIcon.classList.add('hidden');
        }
      }
    };

    volumeSlider.addEventListener('input', handleVolumeChange);
  });

  // Event listeners
  document.addEventListener('DOMContentLoaded', loadVideos);

  document.addEventListener('DOMContentLoaded', () => {
    if (!videoElement || !soundToggle || !soundOnIcon || !soundOffIcon) return;

    videoElement.addEventListener('ended', playNextVideo);
    soundToggle.addEventListener('click', toggleSound);

    document.querySelector('.video-wrapper')?.addEventListener('click', (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      if (target.id !== 'soundToggle' && 
          target.id !== 'soundOnIcon' && 
          target.id !== 'soundOffIcon') {
        togglePlayPause();
      }
    });
  });
  


</script>

<style>
  .titulo{
    font-size: 20px;
    top: 10px;
    left: 20px;
    position: absolute;
  }
  .video-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100vh;
  }
  
  .video-wrapper {
    position: relative;
    width: 80vmin; /* Cuadrado usando vmin */
    height: 80vmin;
    max-width: 600px;
    max-height: 600px;
  }
  
  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 16px;
    background-color: #111;
  }
  
  #soundToggle {
    position: absolute;
    bottom: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.5);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    color: white;
  }
  .sound{
    margin: auto;

  filter: invert(1);
  text-align: center;
  align-content: center;
  align-items: center;
  width: 20px;
  height: 20px;
  position: relative;
  }
  
  .hidden {
    display: none;
  }
  
  .volume-control {
    position: absolute;
    bottom: 50px;
    right: -60px;
    width: 150px;
    height: 30px;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 15px;
    transform: rotate(-90deg);
    display: none;
    padding: 5px;
  }

  #soundToggle:hover .volume-control {
    display: block;
  }

  #volumeSlider {
    width: 100%;
    height: 5px;
    -webkit-appearance: none;
    background: rgba(255, 255, 255, 0.3);
    outline: none;
    border-radius: 3px;
    cursor: pointer;
  }

  #volumeSlider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 15px;
    height: 15px;
    background: white;
    border-radius: 50%;
    cursor: pointer;
  }

  #volumeSlider::-moz-range-thumb {
    width: 15px;
    height: 15px;
    background: white;
    border-radius: 50%;
    cursor: pointer;
    border: none;
  }
</style>